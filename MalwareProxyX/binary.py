#  Copyright (c) 2021 - Darsh Patel
#  All rights reserved.
#  Redistribution and use in source and binary forms, with or without modification,
#  are permitted provided that the following conditions are met:
#      1. Redistributions of source code must retain the above copyright notice,
#      this list of conditions and the following disclaimer.
#      2. Redistributions in binary form must reproduce the above copyright notice,
#      this list of conditions and the following disclaimer in the documentation
#      and/or other materials provided with the distribution.
#      3. Neither the name of the copyright holder nor the names of its contributors
#      may be used to endorse or promote products derived from this software without
#      specific prior written permission.
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.

import tempfile

import logging

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)


class BinaryProcessor:
    def __init__(self, binary_content):
        self.logger = logger
        self.binary_content = binary_content

        self.binary_format = self.check_binary_format(self.binary_content)
        self.file = None

    def save(self):
        """
        Saves the binary file to a temporary location
        """
        self.file = tempfile.NamedTemporaryFile()
        self.file.write(self.binary_content)
        self.file.flush()
        self.file.seek(0)
        self.logger.info(f"Saved Binary at: {self.file.name}")

    @staticmethod
    def check_binary_format(_bytes) -> str:
        """
        Checks the magic bytes of a binary string to determine file format
        :param _bytes: byte string of a binary
        :return: String Containing format of the bianry
        """
        magic_bytes = {
            b'MZ': 'pe',
            b'7f454c46': 'elf',
            b'cafebabe': 'fatfile',
            b'cffaedfe': 'machox64',
        }
        if _bytes[0:2] in magic_bytes:
            return magic_bytes[_bytes[0:2]]
        elif _bytes[0:8] in magic_bytes:
            return magic_bytes[_bytes[0:8]]
        else:
            return None

    def binary_blackhole(self) -> object:
        """
        Processes Binary files to inject malware payload
        :return: Patched Binary, or None if failed to patch
        """
        result = None
        try:
            if self.binary_format == 'pe':
                pass
            return result
        except Exception as e:
            logger.error(f'Could Not Patch File: {e}')
