#!/usr/bin/env python3
"""
MalwareProxyX
Author Darsh Patel - darshkpatel@gmail.com
"""
try:
    from mitmproxy.options import Options
    from mitmproxy.proxy.config import ProxyConfig
    from mitmproxy.proxy.server import ProxyServer
    from mitmproxy.tools.dump import DumpMaster
except ImportError:
    raise ImportError('mitmproxy isn\'t installed. You must install mitmproxy. Ideally run the setup scripts again')

import os
import logging
import sys
import subprocess

logger = logging.getLogger('MalwareProxyX')
logging.basicConfig(level=logging.INFO)


class MalwareProxyX:
    def __init__(self):
        self.logger = logger
        self.logger.info("Initializing MalwareProxyX")
        self.pre_run_checks()
        self.options = self.generate_options()

        self.master = ProxyMaster(self.options, with_termlog=False, with_dumper=False)
        self.master.server = ProxyServer(self.generate_config(self.options))
        self.master.addons.add(TrafficHandler())
        self.logger.info("Starting Proxy. Press Ctrl+C to Stop")
        self.master.run()

    def pre_run_checks(self) -> None:
        self.logger.info("Running Pre Run Checks")
        if os.name == 'nt':
            self.logger.warning("Windows isn't currently supported")
            sys.exit(1)

        self.logger.info("Verifying IP Forwarding Support")
        try:
            if sys.platform == "darwin":
                if '0' in subprocess.check_output(["sysctl", "net.inet.ip.forwarding"], encoding="UTF-8").strip():
                    self.logger.warning(
                        "net.inet.ip.forwarding is not enabled \n Use: sysctl net.inet.ip.forwarding=1 to enable it")
                    sys.exit(1)
            elif sys.platform.startswith("linux"):
                if subprocess.check_output(["cat", "/proc/sys/net/ipv4/ip_forward"], encoding="UTF-8").strip() != "1":
                    self.logger.warning(
                        "ip forwarding is not enabled \n Use: echo 1 > /proc/sys/net/ipv4/ip_forward to enable it")
                    sys.exit(1)
        except Exception as e:
            self.logger.exception(e)
            sys.exit(1)

    def generate_options(self) -> Options:
        # ToDo: Add Support for Config File / ArgParser

        return Options(listen_host='0.0.0.0', listen_port=8080, http2=True)

    def generate_config(self, options: Options) -> ProxyConfig:
        # ToDo: Add Support for Config File / ArgParser

        config = ProxyConfig(options)
        return config


class TrafficHandler(object):
    def request(self, flow):
        print('REQUEST:')
        print(f'HOST: {flow.request.host}')
        print(f'PATH: {flow.request.path}')

    def response(self, flow):
        print('RESPONSE:')
        print(f'HOST: {flow.request.host}')
        print(f'PATH: {flow.request.path}')


class ProxyMaster(DumpMaster):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

    def run(self):
        try:
            DumpMaster.run(self)
        except KeyboardInterrupt:
            self.shutdown()


if __name__ == "__main__":
    MalwareProxyX()
